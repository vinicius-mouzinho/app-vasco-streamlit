import streamlit as st
import plotly.express as px
import plotly.graph_objects as go

# Pares de m√©tricas por posi√ß√£o com nome amig√°vel

PARES_METRICAS_POR_POSICAO = {
    "CB": [
        ("Duelos Defensivos por 30' de Posse Advers√°ria", "Duelos defensivos ganhos, %", "Efici√™ncia Defensiva"),
        ("Duelos a√©rios/90", "Duelos a√©reos ganhos, %", "Domin√¢ncia A√©rea"),
        ("Cortes/90", "Interse√ß√µes/90", "Recupera√ß√µes e Cortes"),
        ("Passes/90", "Passes certos, %", "Volume e Precis√£o de Passe"),
        ("Passes longos/90", "Passes longos certos, %", "Constru√ß√£o com Passes Longos"),
        ("Faltas/90", "Cart√µes amarelos/90", "Agressividade Defensiva"),
    ],
    "LB": [
        ("Cruzamentos/90", "Cruzamentos certos, %", "Efici√™ncia nos Cruzamentos"),
        ("Assist√™ncias esperadas por 100 passes", "Passes progressivos certos/90", "Cria√ß√£o e Progresso"),
        ("Corridas progressivas/90", "Dribles/90", "Iniciativa Ofensiva"),
        ("Duelos ofensivos/90", "Duelos ofensivos ganhos, %", "1v1 no Ataque"),
        ("Duelos Defensivos por 30' de Posse Advers√°ria", "Duelos defensivos ganhos, %", "Efici√™ncia Defensiva Lateral"),
        ("Passes para ter√ßo final/90", "Passes certos para ter√ßo final, %", "Distribui√ß√£o no Ter√ßo Final"),
    ],
    "RB": [
        ("Cruzamentos/90", "Cruzamentos certos, %", "Efici√™ncia nos Cruzamentos"),
        ("Assist√™ncias/90", "Passes progressivos certos/90", "Cria√ß√£o pelo Corredor Direito"),
        ("Corridas progressivas/90", "Dribles/90", "Agressividade Ofensiva"),
        ("Duelos ofensivos/90", "Duelos ofensivos ganhos, %", "Confronto Individual Ofensivo"),
        ("Duelos Defensivos por 30' de Posse Advers√°ria", "Duelos defensivos ganhos, %", "Solidez Defensiva"),
        ("Golos sem ser por pen√°lti/90", "Assist√™ncias/90", "Participa√ß√µes Diretas em Gols"),
    ],
    "DMF": [
        ("Interce√ß√µes ajust. √† posse", "A√ß√µes Defensivas por 30' de Posse Advers√°ria", "Recupera√ß√£o e Cobertura"),
        ("Passes para a frente/90", "Passes para a frente certos, %", "Progresso Vertical"),
        ("Duelos/90", "Duelos ganhos, %", "Dom√≠nio F√≠sico"),
        ("Passes progressivos/90", "Passes progressivos certos, %", "Distribui√ß√£o Progressiva"),
        ("Faltas/90", "Cart√µes amarelos/90", "Intensidade Defensiva"),
    ],
    "CMF": [
        ("Assist√™ncias esperadas por 100 passes", "Passes chave/90", "Cria√ß√£o de Oportunidades"),
        ("Passes progressivos/90", "Passes progressivos certos, %", "Constru√ß√£o Progressiva"),
        ("A√ß√µes com a bola/90", "Perdas de bola a cada 100 a√ß√µes", "Volume e Seguran√ßa"),
        ("Passes para ter√ßo final/90", "Passes certos para ter√ßo final, %", "Distribui√ß√£o Avan√ßada"),
        ("Duelos/90", "Duelos ganhos, %", "Competitividade em Campo"),
    ],
    "AMF": [
        ("Gols esperados (sem p√™naltis)/90", "Assist√™ncias esperadas por 100 passes", "Participa√ß√µes em Gols Esperadas"),
        ("Golos sem ser por pen√°lti/90", "Assist√™ncias/90", "Participa√ß√µes em Gols"),
        ("Dribles/90", "Frequ√™ncia no drible (%)", "1v1 e Iniciativa"),
        ("Toques na √°rea/90", "Remates √† baliza/90", "Presen√ßa no Ter√ßo Final"),
        ("Passes progressivos/90", "Passes para a √°rea de pen√°lti/90", "Infiltra√ß√£o com Passes"),
    ],
    "LW": [
        ("Dribles/90", "Frequ√™ncia no drible (%)", "Agressividade no 1v1"),
        ("Corridas progressivas/90", "Toques na √°rea/90", "Progress√£o e Presen√ßa"),
        ("Assist√™ncias/90", "Cruzamentos certos, %", "Servi√ßo e Entrega"),
        ("Golos sem ser por pen√°lti/90", "Remates √† baliza/90", "Finaliza√ß√£o e Objetividade"),
        ("Passes para a √°rea de pen√°lti/90", "Assist√™ncias esperadas/90", "Cria√ß√£o na √Årea"),
    ],
    "RW": [
        ("Dribles/90", "Frequ√™ncia no drible (%)", "Iniciativa Ofensiva Direita"),
        ("Golos sem ser por pen√°lti/90", "Assist√™ncias/90", "Decisivo no Ter√ßo Final"),
        ("Cruzamentos/90", "Cruzamentos certos, %", "Efici√™ncia nos Cruzamentos"),
        ("Passes chave/90", "Assist√™ncias esperadas por 100 passes", "Cria√ß√£o de Chances"),
        ("Remates √† baliza/90", "Golos marcados, %", "Finaliza√ß√£o com Efici√™ncia"),
    ],
    "CF": [
        ("Golos sem ser por pen√°lti/90", "Remates √† baliza/90", "Finaliza√ß√£o Direta"),
        ("Toques na √°rea/90", "Remates/90", "Presen√ßa Ofensiva"),
        ("Golos de cabe√ßa/90", "Duelos a√©reos ganhos, %", "Jogo A√©reo"),
        ("Assist√™ncias/90", "Passes inteligentes/90", "Participa√ß√£o em Assist√™ncias"),
        ("Golos marcados, %", "Remates √† baliza, %", "Aproveitamento nas Finaliza√ß√µes"),
    ],
}


def exibir_grafico_dispersao(df):
    st.header("üìà Gr√°fico de Dispers√£o Interativo")

    if df is None or df.empty:
        st.warning("Nenhum dado dispon√≠vel para plotar.")
        return

    metricas_numericas = df.select_dtypes(include='number').columns.tolist()
    if not metricas_numericas:
        st.warning("N√£o h√° m√©tricas num√©ricas suficientes no DataFrame.")
        return

    jogador_destaque = st.selectbox("üîç Jogador em destaque (opcional)", ["Nenhum"] + sorted(df["Jogador"].dropna().unique()))

    modo = st.radio("Escolha o modo de visualiza√ß√£o:", ["Pr√©-definido por posi√ß√£o", "Manual"])

    if modo == "Pr√©-definido por posi√ß√£o":
        posicoes_disponiveis = list(PARES_METRICAS_POR_POSICAO.keys())
        posicao_escolhida = st.selectbox("üìå Escolha a posi√ß√£o", posicoes_disponiveis)
        opcoes_metricas = PARES_METRICAS_POR_POSICAO[posicao_escolhida]
        nomes_disponiveis = [nome for _, _, nome in opcoes_metricas]
        nome_selecionado = st.selectbox("üìä Escolha a an√°lise", nomes_disponiveis)
        eixo_x, eixo_y, _ = next(par for par in opcoes_metricas if par[2] == nome_selecionado)
    else:
        col1, col2 = st.columns(2)
        with col1:
            eixo_x = st.selectbox("üìà Eixo X", metricas_numericas)
        with col2:
            eixo_y = st.selectbox("üìâ Eixo Y", metricas_numericas)
        nome_selecionado = f"{eixo_y} vs {eixo_x}"

    df_plot = df.copy()

    def grupo(row):
        if row["Jogador"] == jogador_destaque:
            return "Jogador Selecionado"
        elif "vasco" in str(row.get("Equipa", "")).lower():
            return "Jogador do Vasco"
        else:
            return "Outros"

    df_plot["Grupo"] = df_plot.apply(grupo, axis=1)
    df_plot["Label"] = df_plot["Jogador"]

    color_map = {
        "Jogador Selecionado": "darkorange",
        "Jogador do Vasco": "royalblue",
        "Outros": "saddlebrown"
    }

    fig = px.scatter(
        df_plot,
        x=eixo_x,
        y=eixo_y,
        color="Grupo",
        text="Label",
        hover_name="Jogador",
        opacity=0.85,
        color_discrete_map=color_map,
        height=800,
        template="plotly_white"
    )

    fig.update_traces(
        marker=dict(size=14),
        textposition='top center',
        textfont=dict(size=16)
    )

    media_x = df_plot[eixo_x].mean()
    media_y = df_plot[eixo_y].mean()

    fig.add_shape(
        type="line",
        x0=media_x, x1=media_x,
        y0=df_plot[eixo_y].min(), y1=df_plot[eixo_y].max(),
        line=dict(color="gray", width=1, dash="dash")
    )
    fig.add_shape(
        type="line",
        x0=df_plot[eixo_x].min(), x1=df_plot[eixo_x].max(),
        y0=media_y, y1=media_y,
        line=dict(color="gray", width=1, dash="dash")
    )

    fig.update_layout(
        title=nome_selecionado,
        xaxis_title=eixo_x,
        yaxis_title=eixo_y,
        legend_title="Grupo",
        font=dict(size=12),
        xaxis=dict(title=dict(text=eixo_x, font=dict(size=18))),
        yaxis=dict(title=dict(text=eixo_y, font=dict(size=18)))
    )

    st.plotly_chart(fig, use_container_width=True)
